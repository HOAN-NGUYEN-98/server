{"version":3,"sources":["connect.js"],"names":["express","require","sql","fs","app","config","connect","err","console","log","get","request","response","Request","query","result","error","send","recordset","data","JSON","stringify","writeFile","listen","exec"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMG,GAAG,GAAGJ,OAAO,EAAnB,C,CACA;;AACA,IAAIK,MAAM,GAAG;AACT,UAAQ,IADC;AACK;AACd,cAAY,QAFH;AAEa;AACtB,YAAU,WAHD;AAGc;AACvB,cAAY,SAJH;AAIc;AACvB,aAAW;AACP,eAAW,KADJ,CACU;;AADV;AALF,CAAb,C,CAUA;;AACAH,GAAG,CAACI,OAAJ,CAAYD,MAAZ,EAAoB,UAAAE,GAAG,EAAI;AACvB,MAAIA,GAAJ,EAAS;AACL,UAAMA,GAAN;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,CALD,E,CAOA;;AACAL,GAAG,CAACM,GAAJ,CAAQ,GAAR,EAAa,UAACC,OAAD,EAAUC,QAAV,EAAuB;AAChC;AACA,MAAIV,GAAG,CAACW,OAAR,GAAkBC,KAAlB,CAAwB,sCAAxB,EAAgE,UAACP,GAAD,EAAMQ,MAAN,EAAiB;AAC7E,QAAIR,GAAJ,EAAS;AACLC,MAAAA,OAAO,CAACQ,KAAR,CAAc,wBAAd,EAAwCT,GAAxC;AACH,KAFD,MAEO;AACHK,MAAAA,QAAQ,CAACK,IAAT,CAAcF,MAAM,CAACG,SAArB,EADG,CAC8B;AAClC;;AACCV,MAAAA,OAAO,CAACC,GAAR,CAAYM,MAAM,CAACG,SAAnB;AAEA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,MAAM,CAACG,SAAtB,CAAb,CALG,CAOH;;AACAf,MAAAA,EAAE,CAACmB,SAAH,CAAa,WAAb,EAA0BH,IAA1B,EAAgC,MAAhC,EAAwC,UAACZ,GAAD,EAAS;AAE7C,YAAIA,GAAJ,EAAS;AACLC,UAAAA,OAAO,CAACC,GAAR,+BAAmCF,GAAnC;AACH,SAFD,MAEO;AACHC,UAAAA,OAAO,CAACC,GAAR;AACH;AAEJ,OARD;AAUH;AACJ,GAtBD;AAuBH,CAzBD,E,CA2BA;;AACAL,GAAG,CAACmB,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACnBf,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;;AACAR,EAAAA,OAAO,CAAC,eAAD,CAAP,CAAyBuB,IAAzB,CAA8B,8BAA9B;AACH,CAHD","sourcesContent":["const express = require(\"express\");\r\nconst sql = require(\"mssql\");\r\nconst fs = require('fs');\r\nconst app = express();\r\n// SQL Server configuration\r\nvar config = {\r\n    \"user\": \"sa\", // Database username\r\n    \"password\": \"123456\", // Database password\r\n    \"server\": \"localhost\", // Server IP address\r\n    \"database\": \"DB_USER\", // Database name\r\n    \"options\": {\r\n        \"encrypt\": false // Disable encryption\r\n    }\r\n}\r\n \r\n// Connect to SQL Server\r\nsql.connect(config, err => {\r\n    if (err) {\r\n        throw err;\r\n    }\r\n    console.log(\"Connection Successful!\");\r\n});\r\n \r\n// Define route for fetching data from SQL Server\r\napp.get(\"/\", (request, response) => {\r\n    // Execute a SELECT query\r\n    new sql.Request().query(\"SELECT * FROM [DB_USER].[dbo].[USER]\", (err, result) => {\r\n        if (err) {\r\n            console.error(\"Error executing query:\", err);\r\n        } else {\r\n            response.send(result.recordset); // Send query result as response\r\n           // console.dir(result.recordset);\r\n            console.log(result.recordset);\r\n \r\n            const data = JSON.stringify(result.recordset);\r\n \r\n            // write file to disk\r\n            fs.writeFile('./db.json', data, 'utf8', (err) => {\r\n           \r\n                if (err) {\r\n                    console.log(`Error writing file: ${err}`);\r\n                } else {\r\n                    console.log(`File is written successfully!`);\r\n                }\r\n           \r\n            });\r\n \r\n        }\r\n    });\r\n});\r\n \r\n// Start the server on port 3000\r\napp.listen(3000, () => {\r\n    console.log(\"Listening on port 3000...\");\r\n    require('child_process').exec('start http://localhost:3000/');\r\n});"],"file":"connect.dev.js"}